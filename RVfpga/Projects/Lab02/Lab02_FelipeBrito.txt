/* Felipe Brito - 2021007366 */


/* ----------------- Projeto 02 - Read Switches Assembly -----------------*/

// memory-mapped I/O addresses
# GPIO_SWs   = 0x80001400
# GPIO_LEDs  = 0x80001404
# GPIO_INOUT = 0x80001408

.globl main


main:
  li t0, 0x80001400   # base address of GPIO memory-mapped registers
  li t1, 0xFFFF       # set direction of GPIOs
                      # upper half = switches (inputs)  (=0)
                      # lower half = outputs (LEDs)     (=1)
  sw t1, 8(t0)        # GPIO_INOUT = 0xFFFF

repeat:
  lw   t1, 0(t0)      # read switches: t1 = GPIO_SWs
  srli t1, t1, 16     # shift val to the right by 16 bits
  sw   t1, 4(t0)      # write value to LEDs: GPIO_LEDs = t1
  j    repeat         # repeat loop

/* ----------------- Exercicio 01 - FlashSwitchesToLEDs Assembly -----------------*/

// FlashSwitchesToLEDs.S
// Description: Flashes the value of the switches on the LEDs.

// memory-mapped I/O addresses
# GPIO_SWs   = 0x80001400
# GPIO_LEDs  = 0x80001404
# GPIO_INOUT = 0x80001408

#define DELAY 0x1000000               // Define the DELAY 

.globl main
main:

  li t0, 0x80001400       # base address of GPIO memory-mapped registers
  li t1, 0xFFFF           # set direction of GPIOs
                          # upper half = switches (inputs)  (=0)
                          # lower half = outputs (LEDs)     (=1)
  sw t1, 8(t0)            # GPIO_INOUT = 0xFFFF

Loop:
  lw   t1, 0(t0)          # read switches: t1 = GPIO_SWs
  srli t1, t1, 16         # shift val to the right by 16 bits
  sw   t1, 4(t0)          # write value to LEDs: GPIO_LEDs = t1
  li   t2, DELAY          # delay amount for flashing LEDs  
Repeat1:
  addi t2, t2, -1         # decrement delay amount
  bne  t2, zero, Repeat1  # if delay amount not 0, loop

  sw zero, 4(t0)          # LEDs = 0 (off)
  li t2, DELAY 
Repeat2:
  addi t2, t2, -1         # decrement delay amount
  bne  t2, zero, Repeat2  # if delay amount not 0, loop

  j    Loop               # repeat loop

/* ----------------- Exercicio 02 - DisplayInverse Assembly -----------------*/

// DisplayInverse.S
// Description: Displays the inverse value of the switches on the LEDs.

// memory-mapped I/O addresses
# GPIO_SWs   = 0x80001400
# GPIO_LEDs  = 0x80001404
# GPIO_INOUT = 0x80001408

.globl main
main:

  li t0, 0x80001400       # base address of GPIO memory-mapped registers
  li t1, 0xFFFF           # set direction of GPIOs
                          # upper half = switches (inputs)  (=0)
                          # lower half = outputs (LEDs)     (=1)
  sw t1, 8(t0)            # GPIO_INOUT = 0xFFFF

Loop:
  lw   t1, 0(t0)          # read switches: t1 = GPIO_SWs
  srli t1, t1, 16         # shift val to the right by 16 bits
  xori t1, t1, -1         # inverse bits
  sw   t1, 4(t0)          # write inverted value to LEDs: GPIO_LEDs = t1
  j    Loop               # repeat loop



/* ----------------- Exercicio 03 - ScrollLEDs Assembly -----------------*/

// ScrollLEDs.S
// Description: Scrolls an increasing number of LEDs (starting with 1) from left-to-right 
// and then right-to-left on the LEDs. Once all the LEDs are lit, it starts over.

// memory-mapped I/O addresses
# GPIO_SWs   = 0x80001400
# GPIO_LEDs  = 0x80001404
# GPIO_INOUT = 0x80001408


#define DELAY 0x500000               // Define the DELAY 
#define MAX  0x10000
#define MSB  0x8000
#define LSB  0x0001
.globl main
main:

  li   t0, 0x80001400       # base address of GPIO memory-mapped registers
  li   t1, 0xFFFF           # set direction of GPIOs
                            # upper half = switches (inputs)  (=0)
                            # lower half = outputs (LEDs)     (=1)
  sw   t1, 8(t0)            # GPIO_INOUT = 0xFFFF

  li   t3, MAX              # t3 = 2^16 (value just beyond left-most LED lit)
  li   t4, MSB              # t3 = 2^15: msb of 16-bit value is 1 (left-most LED lit)
  li   t5, LSB              # t4 = lsb of 16-bit value is 1 (right-most LED lit)

Loop:
  addi t1, zero, 1          # t1 = 1

ShiftLeft:
  sw   t1, 4(t0)            # GPIO_LEDs = t1

  li   t2, DELAY            # t2 = delay amount
Repeat1:
  addi t2, t2, -1           # decrement delay amount
  bne  t2, zero, Repeat1    # if delay amount not 0, loop

  slli t1, t1, 1            # shift t1 left 1 bit
  and  t2, t1, t3           # Has value passed left-most LED? 
  beq  t2, zero, ShiftLeft  # If not, continue

  srli t1, t1, 1            # shift right 1 bit
  and  t2, t1, t5           # is lsb lit? (already know msb is lit)
  bne  t2, zero, Loop       # all LEDs lit - restart at beginning (val = 1)

  srli t1, t1, 1            # otherwise, shift value right 1 bit and insert 1 in msb (16-bit value)
  or   t1, t1, t4

ShiftRight:
  sw   t1, 4(t0)            # GPIO_LEDs = t1

  li   t2, DELAY            # t2 = delay amount
Repeat2:
  addi t2, t2, -1           # decrement delay amount
  bne  t2, zero, Repeat2    # if delay amount not 0, loop

  and  t2, t1, t5           # check if lsb lit
  bne  t2, zero, ShiftLeft  # if lsb lit (right-most LED reached) start shifting left
  srli t1, t1, 1            # shift value right 1 bit
  j    ShiftRight           # continue shifting right






/* ----------------- Exercicio 04 - 4bitAdd Assembly -----------------*/


// 4bitAdd.S
// Description: Adds two 4-bit values encoded in the 4 most significant and 4 least 
// significant switches. The sum is displayed on the least significant 4 LEDs (LED[3:0]). The 
// carryout is displayed in the next most significant LED (LED[4]).

// memory-mapped I/O addresses
# GPIO_SWs   = 0x80001400
# GPIO_LEDs  = 0x80001404
# GPIO_INOUT = 0x80001408

#define MSNIBBLE 0xF000        // most significant nibble of 16-bit number
#define LSNIBBLE 0xF           // least significant nibble of 16-bit number

.globl main
main:

  li   t0, 0x80001400       # base address of GPIO memory-mapped registers
  li   t1, 0xFFFF           # set direction of GPIOs
                            # upper half = switches (inputs)  (=0)
                            # lower half = outputs (LEDs)     (=1)
  sw   t1, 8(t0)            # GPIO_INOUT = 0xFFFF

  li   t4, MSNIBBLE         # t4 = 0xF000 (mask for most significant nibble)
  li   t5, LSNIBBLE         # t5 = 0xF    (mask for least significant nibble)

Loop:
  lw   t1, 0(t0)            # read switches: t1 = GPIO_SWs
  srli t1, t1, 16           # shift val to the right by 16 bits

  and  t2, t1, t4           # t2 = top 4 bits of switches
  srli t2, t2, 12           # shift into lower 4 bits
  and  t3, t1, t5           # t3 = bottom 4 bits of switches
  add  t3, t2, t3           # t3 = sum of top 4 bits and bottom 4 bits 
  sw   t3, 4(t0)            # display sum on LEDs
  j    Loop




